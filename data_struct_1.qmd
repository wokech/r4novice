# Data Structures (Part I) {#sec-data-structure-1}

## Questions

-   List the data structures that can be used in R?

-   How do we define the various data structures?

-   What operations can be performed on the different data structures?

-   How do these data structures differ from one another in terms of storage and functionality?

## Learning Objectives

-   Learn about data structures in R, specifically vectors, lists, and dataframes.

-   Define and manipulate vectors, lists, and dataframes.

-   Perform common operations on each data structure.

-   Identify and differentiate between the diverse data structures offered by R.

-   Choose the appropriate data structure based on the type and organization of your data.

-   Understand the strengths and limitations of each structure for efficient analysis.

## Lesson Content

*In progress (4/3/24)*

### Introduction

Data structures in R are the formats used to organize, process, retrieve, and store data. They help to organize stored data in a way that the data can be used more effectively. Data structures vary according to the number of dimensions and the data types (heterogeneous or homogeneous) contained.

The primary data structures are:

-   Vectors
-   Lists
-   Dataframes
-   Matrices
-   Arrays
-   Factors

In this lesson, we will review the 1st set of data structures: vectors, lists, and dataframes.

### Vectors

Discussed in the previous chapter on "Vectors" (@sec-vectors)

### Lists

Lists are objects/containers that hold elements of the same or different types. They can contain strings, numbers, vectors, dataframes, matrices, functions, or other lists. Lists are created with the list() function.

Examples:

a.  Three element list

```{r}
list_1 <- list(10, 30, 50)
```

b.  Single element list

```{r}
list_2 <- list(c(10, 30, 50))
```

c.  Three element list

```{r}
list_3 <- list(1:3, c(50,40), 3:-5)
```

d.  List with elements of different types

```{r}
list_4 <- list(c("a", "b", "c"), 5:-1)
```

e.  List which contains a list

```{r}
list_5 <- list(c("a", "b", "c"), 5:-1, list_1)
```

f.  Set names for the list elements

```{r}
names(list_5)
```

```{r}
names(list_5) <- c("character vector", "numeric vector", "list")
```

```{r}
names(list_5)
```

g.  Access elements within a list

Return a list within a list

```{r}
list_5[1]

list_5[[1]]
```

Return an individual element within a list of lists

```{r}
list_5[[1]][1]
```

```{r}
list_5[["character vector"]]
```

h.  Length of list

```{r}
length(list_1)
```

```{r}
length(list_5)
```

Flatten out into a single vector using unlist()

```{r}

unlist(list_5)

```

### Dataframes

A data frame is one of the most common data objects used to store tabular data in R. Tabular data has rows representing observations and columns representing variables. Dataframes contain lists of equal-length vectors. Each column holds a different type of data, but within each column, the elements must be of the same type. The most common data frame characteristics are listed below:

-   Columns should have a name,
-   Row names should be unique,
-   Various data can be stored (such as numeric, factor, and character), and,
-   The individual columns should contain the same number of data items.

**NOTE** Tibbles and their advantages

#### Creation of data frames

```{r}
level <- c("Low", "Mid", "High")
language <- c("R", "RStudio", "Shiny")
age <- c(25, 36, 47)
```

```{r}
df_1 <- data.frame(level, language, age)
```

#### Other methods to create dataframes

stack() / unstack() / cbind() / rbind()

as.data.frame()

When you use t() on a dataframe, check using class() to ensure that you didn’t convert to a matrix To transpose a dataframe use t() and then as.data.frame()

#### Functions used to manipulate data frames

a.  Number of rows

```{r}
nrow(df_1)
```

b.  Number of columns

```{r}
ncol(df_1)
```

c.  Dimensions

```{r}
dim(df_1)
```

d.  Class of data frame

```{r}
class(df_1)
```

e.  Column names

```{r}
colnames(df_1)
```

f.  Row names

```{r}
rownames(df_1)
```

g.  Top and bottom values

```{r}
head(df_1, n=2)
```

```{r}
tail(df_1, n=2)
```

h.  Access columns / subset

```{r}
df_1$level
```

i.  Access individual elements / subset

```{r}
df_1[3,2]
```

```{r}
df_1[2, 1:2]
```

j.  Access columns with index / subset

```{r}
df_1[, 3]
```

```{r}
df_1[, c("language")]
```

k.  Access rows with index

```{r}
df_1[2, ]
```

Other methods for accessing

df\[c(1:3), \] and df\$col_name and df\[, “\_”\] and df\[ , c(“a”, “b”)\]

\[ = many elements \[\[ and \$ = single element

df\[row_indices, column_indices\]

df\[row_indices, \]

df\[ , column_indices\]

which\[ry\$a \> 1\] returns the row indexes of the column “a” that has a value \> 1

```{r}
ry$a = ry[ , 1]
```

attach()

str() to explain the output

If you have 4 columns

```{r}
df[ , c(3,4)] = df[ , -c(1,2)]
```

glimpse() / View() / unique() / distinct() complete.cases() - eliminate missing values from a vector, matrix, or data frame

## Exercises

i.  Explain the characteristics and use cases of lists in R.

ii. Create a list containing a numeric vector, character vector, and logical vector.

iii. How can you add elements to a list in R?

iv. Explain what a data frame is and why it is widely used in R.

v.  Write code to create a data frame with columns for "Name," "Age," and "Gender" for three individuals.

vi. How can you combine two data frames horizontally in R?

vii. Discuss various methods for subsetting elements in data structures.

viii. How do you check the structure of a data frame? What function is used?

ix. How do you access a specific column of a data frame?

x.  What are rownames and colnames in a data frame? How are they useful?

xi. How do you add a new column to an existing data frame?

## Summary

We have now covered half of the key data structures used in R. Knowledge of how to identify and manipulate vectors, lists, and dataframes will help the learner perform numerous computational tasks in R. Next, to complete our review of data structures, we will focus on matrices, arrays, and factors.
