# Data Structures (Part II) {#sec-data-structure-2}

## Questions

-   List the data structures that can be used in R?

-   How do we define the various data structures?

-   What operations can be performed on the different data structures?

-   How do these data structures differ from one another in terms of storage and functionality?

## Learning Objectives

-   Learn about data structures in R, specifically matrices, arrays, and factors.

-   Define and manipulate matrices, arrays, and factors.

-   Perform common operations on each data structure.

-   Identify and differentiate between the diverse data structures offered by R.

-   Choose the appropriate data structure based on the type and organization of your data.

-   Understand the strengths and limitations of each structure for efficient analysis.

## Lesson Content

*In progress (4/3/24)*

### Introduction

Data structures in R are the formats used to organize, process, retrieve, and store data. They help to organize stored data in a way that the data can be used more effectively. Data structures vary according to the number of dimensions and the data types (heterogeneous or homogeneous) contained. 

The primary data structures are:
- Vectors
- Lists
- Data frames
- Matrices
- Arrays
- Factors

In this lesson, we will review the 2nd set of data structures: matrices, arrays, and factors.

### Matrices

A matrix is a rectangular two-dimensional (2D) homogeneous data set containing rows and columns. It contains real numbers that are arranged in a fixed number of rows and columns. Matrices are generally used for various mathematical and statistical applications.

a.	Creation of matrices

Format: matrix(range, nrow = _, ncol = _)

```{r}
m1 <- matrix(1:9, nrow = 3, ncol = 3) 
m2 <- matrix(21:29, nrow = 3, ncol = 3) 
m3 <- matrix(1:12, nrow = 2, ncol = 6)
m1
m2
m3
```

b.	Obtain the dimensions of the matrices
# m1

```{r}
nrow(m1)
```{r}

```{r}
ncol(m1)
```{r}

```{r}
dim(m1)
```{r}

# m3

```{r}
nrow(m3)
```{r}

```{r}
ncol(m3)
```{r}

```{r}
dim(m3)
```{r}

c. Arithmetic with matrices

```{r}
m1+m2
```{r}

```{r}
m1-m2
```{r}

```{r}
m1*m2
```{r}

```{r}
m1/m2
```{r}

```{r}
m1 == m2
```{r}

d. Matrix multiplication

```{r}
m5 <- matrix(1:10, nrow = 5)
m6 <- matrix(43:34, nrow = 5)
m5
m6
```{r}

```{r}
m5*m6
```{r}

# m5%*%m6 will not work because of the dimensions.
# the vector m6 needs to be transposed.

# Transpose

```{r}
m5%*%t(m6)
```{r}

e. Generate an identity matrix

```{r}
diag(5)
```{r}

f. Column and row names
```{r}
colnames(m5)
```{r}

```{r}
rownames(m6)
```{r}

colSums() / rowSums()

- When subsetting use “drop=FALSE” to avoid converting single column or single row matrices to vectors
- Note, when you divide a matrix by a vector, the operation is row-wise.

### Arrays

An array is a multidimensional vector that stores homogeneous data. It can be thought of as a stacked matrix and stores data in more than 2 dimensions (n-dimensional). An array is composed of rows by columns by dimensions. Example: an array with dimensions, dim = c(2,3,3), has 2 rows, 3 columns, and 3 matrices.

b.	Creating arrays

```{r}
arr_1 <- array(1:12, dim = c(2,3,2))
```{r}

```{r}
arr_1
```{r}

b. Filter array by index
```{r}
arr_1[1 ,  , ]
```{r}

```{r}
arr_1[1, ,1]
```{r}

```{r}
arr_1[, , 1]
```{r}

### Factors

Factors are used to store integers or strings which are categorical. They categorize data and store the data in different levels. This form of data storage is useful for statistical modelling. Examples include TRUE or FALSE and male or female. Useful for handling qualitative datasets.

```{r}
vector <- c(“Male”, “Female”)
```{r}

```{r}
factor_1 <- factor(vector)
factor_1
```{r}

OR

```{r}
factor_2 <- as.factor(vector)
factor_2
```{r}

```{r}
as.numeric(factor_2)
```{r}

```{r}
droplevels()
```{r}

Create example with the following sequence:
- as.numeric()
- as.character()
- factor()

*NOTE: forcats – tidyverse will be discussed later*

## Exercises

-   How do you create a matrix in R? Give an example.

-   What are the column and row dimensions of a matrix called in R?

-   How do you access elements in a matrix?

-   Generate a 3x3 identity matrix using matrix().

-   Write code to create a 3x3 matrix with sequential numeric values.

-   Convert a character vector to a factor with 3 levels.

-   Describe the purpose of factors in R.

-   How do you create a factor variable with specified levels?

-   What is an array, and how does it differ from a matrix in R?

-   Provide an example of creating a three-dimensional array.

## Summary

In this chapter, we have completed our review of data structures. These data structures have different properties that influence how they are used in various computational tasks. Additionally, we have looked at the strengths and limitations of each structure for data analysis. However, we haven’t discussed an important aspect of data structures: what do we do with missing data? In the final chapter, we will tackle this issue and provide solutions.
