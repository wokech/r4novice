[
  {
    "objectID": "arithmetic_variables.html",
    "href": "arithmetic_variables.html",
    "title": "6  Basic arithmetic, arithmetic operators, and variables",
    "section": "",
    "text": "6.1 Questions",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic arithmetic, arithmetic operators, and variables</span>"
    ]
  },
  {
    "objectID": "arithmetic_variables.html#questions",
    "href": "arithmetic_variables.html#questions",
    "title": "6  Basic arithmetic, arithmetic operators, and variables",
    "section": "",
    "text": "How can we perform basic arithmetic operations in R?\nWhat arithmetic operators can be used in R?\nHow do I assign values to variables?\nAre there naming conventions/variable style guides for creating new variables?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic arithmetic, arithmetic operators, and variables</span>"
    ]
  },
  {
    "objectID": "arithmetic_variables.html#learning-objectives",
    "href": "arithmetic_variables.html#learning-objectives",
    "title": "6  Basic arithmetic, arithmetic operators, and variables",
    "section": "\n6.2 Learning Objectives",
    "text": "6.2 Learning Objectives\n\nLearn how to use R to perform basic arithmetic.\nDeclare and manipulate variables to store and retrieve data in R.\nMaster basic arithmetic operations like addition, subtraction, multiplication, and division in R.\nUnderstand the concept of variables and assign numeric values in your R code.\nUse appropriate naming conventions for variables.\nDifferentiate between different variable types (numeric, integer, character) and choose appropriate ones.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic arithmetic, arithmetic operators, and variables</span>"
    ]
  },
  {
    "objectID": "arithmetic_variables.html#lesson-content",
    "href": "arithmetic_variables.html#lesson-content",
    "title": "6  Basic arithmetic, arithmetic operators, and variables",
    "section": "\n6.3 Lesson Content",
    "text": "6.3 Lesson Content\n\n6.3.1 Basic Arithmetic\nTo get started, first, we will open R or RStudio (Figure 6.1). In R, go to the console, and in RStudio, head to the console pane. Next, type in a basic arithmetic calculation such as 1 + 1 after the angle bracket (&gt;) and hit “Enter.”\nNOTE: According to the Tidyverse Style Guide, there should be a space on either side of the operator.\nExamples\n\na &lt;- 2\nb &lt;- 4 + c\n\n\n1 + 1\n\nThe output will be observed next to the square bracket containing the number 1 ([1]). The 1 indicates that the indexing begins at position 1. Here, as opposed to Python, which uses zero-based indexing, R uses one-based indexing.\n\n\n\n\n\nFigure 6.1: A basic arithmetic calculation in the R Console\n\n\nAdditionally, to include comments into the code block, we use the hash (#) symbol. Anything written after the code block will be commented out and not run.\n\n# A simple arithmetic calculation (which is not run because of the hash symbol)\n\n1 + 1\n\n\n6.3.2 Arithmetic operators\nVarious arithmetic operators (listed below) can be used in R/RStudio.\n\n\nArithmetic Operator\nDescription\n\n\n\n+\nAddition\n\n\n-\nSubtraction\n\n\n*\nMultiplication\n\n\n/\nDivision\n\n\n\n** or ^\n\nExponentiation\n\n\n%%\nModulus (remainder after division)\n\n\n%/%\nInteger division\n\n\n\nExample\nCreate an R script called “my_arithmetic_1.R”\nRun the following calculations in the script and save the file to the working directory.\n\n6.3.2.1 Addition\n\n10 + 30\n\n\n6.3.2.2 Subtraction\n\n30 - 24\n\n\n6.3.2.3 Multiplication\n\n20 * 4\n\n\n6.3.2.4 Division\n\n93 / 4\n\n\n6.3.2.5 Exponentiation\n\n3^6\n\n\n6.3.2.6 Modulus (remainder with division)\n\n94 %% 5\n\n\n6.3.2.7 Integer Division\n\n54 %/% 7\n\n\n6.3.2.8 Slightly more complex arithmetic operations\n\n5 - 1 + (4 * 3) / 16 * 3\n\n\n6.3.3 Variables\nVariables are instrumental in programming because they are used as “containers” to store data values. To assign a value to a variable, we can use &lt;− or =. However, most R users prefer to use &lt;−.\n\nVariables store values for later use in your code. This results in improved readability and efficiency.\nAssign values to variables using the &lt;- operator (e.g., x &lt;- 5).\nVariable names should be descriptive and avoid special characters.\n\n\n6.3.3.1 Variable assignment\n\nUsing &lt;-\n\n\n\nvariable_1 &lt;- 5\nvariable_1\n\n\nUsing =\n\n\n\nvariable_2 &lt;- 10\nvariable_2\n\n\nReverse the value and variable with -&gt;\n\n\n\n15 -&gt; variable_3\nvariable_3\n\n\nAssign two variables to one value\n\n\nvariable_4 &lt;- variable_5 &lt;- 30\nvariable_4\nvariable_5\n\nThe output of the variable can then be obtained by:\n\nTyping the variable name and then pressing “Enter,”\nTyping “print” with the variable name in brackets, print(variable), and,\nTyping “View” with the variable name in brackets, View(variable).\n\nBoth print() and View() are some of the many built-in functions available in R.\n\n\n\n\n\nFigure 6.2: The environment pane in RStudio with stored variables\n\n\n\nprint(variable_1)\n\n\nView(variable_2)\n\nOutput of View() will be seen in the script pane and stored variables can be seen in the environment pane (Figure 6.3).\n\n\n\n\n\nFigure 6.3: The environment pane in RStudio with stored variables\n\n\n\n6.3.3.2 The assign() and rm() functions\nIn addition to using the assignment operators (&lt;- and =), we can use the assign() function to assign a value to a variable.\n\nassign(\"variable_6\", 555)\nvariable_6\n\nTo remove the assignment of the value to the variable, either delete the variable in the “environment pane” or use the rm() function.\n\nvariable_7 &lt;- 159\n\n\nrm(variable_7)\n\nAfter running rm() look at the environment pane to confirm whether variable_7 has been removed.\n\n6.3.3.3 Naming variables\nAt this point, you may be wondering what conventions are used for naming variables. First, variables need to have meaningful names such as current_temp, time_24_hr, or weight_lbs. However, we need to be mindful of the variable style guide (link) which provides us with the appropriate rules for naming variables.\nobject_name &lt;- value\nObjects must start with a letter and only contain letters and numbers\nSome rules to keep in mind are: 1. R is case-sensitive (variable is not the same as Variable), 2. Names similar to typical outputs or functions (TRUE, FALSE, if, or else) cannot be used, 3. Appropriate variable names can contain letters, numbers, dots, and underscores. However, you cannot start with an underscore, number, or dot followed by a number.\n\n6.3.3.4 Valid and invalid variable names\nTypes of variable names:\n\nsnake_case\nCamelCase\nuse.periods\nsnake.case.CamelCase_snake_case\n\nValid names:\n\ntime_24_hr\n.time24_hr\n\nInvalid names:\n\n_24_hr.time\n24_hr_time\n.24_hr_time",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic arithmetic, arithmetic operators, and variables</span>"
    ]
  },
  {
    "objectID": "arithmetic_variables.html#exercises",
    "href": "arithmetic_variables.html#exercises",
    "title": "6  Basic arithmetic, arithmetic operators, and variables",
    "section": "\n6.4 Exercises",
    "text": "6.4 Exercises\n\nIn R, calculate 3 + 5 and then 4 * 6.\nAssign the value 10 to a variable called x. Then calculate x ^ 2. Next, calculate the expression (3 + x) * (x - 1) using the x from before.\nDeclare a variable to store your age and assign a value to it. Print the variable value.\nCreate variables for the length and width of a rectangle and calculate its area.\nExplain the rules for naming variables in R. Provide examples of valid and invalid variable names.\nWhat is operator precedence in R? How does it work for arithmetic operators?\nWhat data types can be used for arithmetic operations in R?\nWhat is the difference between &lt;- and = for assignment in R?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic arithmetic, arithmetic operators, and variables</span>"
    ]
  },
  {
    "objectID": "arithmetic_variables.html#summary",
    "href": "arithmetic_variables.html#summary",
    "title": "6  Basic arithmetic, arithmetic operators, and variables",
    "section": "\n6.5 Summary",
    "text": "6.5 Summary\nIn this chapter, I have demonstrated how to perform basic arithmetic operations and how to use the various arithmetic operators available in R/RStudio. Additionally, the concept of variables and values has been explained, and conventions for appropriately naming variables have been discussed. In the next chapter, we will look at the other types of primary operators in R/RStudio.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic arithmetic, arithmetic operators, and variables</span>"
    ]
  },
  {
    "objectID": "importing.html",
    "href": "importing.html",
    "title": "5  Importing data and saving analysis outputs",
    "section": "",
    "text": "5.1 Questions",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importing data and saving analysis outputs</span>"
    ]
  },
  {
    "objectID": "importing.html#questions",
    "href": "importing.html#questions",
    "title": "5  Importing data and saving analysis outputs",
    "section": "",
    "text": "Can users access and use internal datasets for analysis in R? How do I load the datasets?\nHow does one import external datasets into R? What functions and packages are commonly used for this purpose?\nHow do I handle different data formats such as CSV, Excel, or text files?\nOnce the user completes their data analysis, how can their output(s) be saved?\nHow can I create new data objects or modify existing ones within R?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importing data and saving analysis outputs</span>"
    ]
  },
  {
    "objectID": "importing.html#learning-objectives",
    "href": "importing.html#learning-objectives",
    "title": "5  Importing data and saving analysis outputs",
    "section": "\n5.2 Learning Objectives",
    "text": "5.2 Learning Objectives\n\nLearn how to load and access internal R datasets.\nImport external datasets into your R project folder.\nDemonstrate how to save analysis outputs from R such as tables and datasets.\nUnderstand methods for importing data stored internally in R and from external sources.\nUtilize built-in functions and packages to read various data formats like CSV, Excel, and text files.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importing data and saving analysis outputs</span>"
    ]
  },
  {
    "objectID": "importing.html#lesson-content",
    "href": "importing.html#lesson-content",
    "title": "5  Importing data and saving analysis outputs",
    "section": "\n5.3 Lesson Content",
    "text": "5.3 Lesson Content\n\n5.3.1 Introduction\nA dataset is a collection of data, and R offers the user the opportunity to either use internal datasets or import external datasets for analysis. In this lesson, we will cover the basics of accessing internal datasets, the importation of external datasets, as well as the saving of analysis outputs, such as plots and tables.\n\n5.3.2 Working with internal datasets\nR has several built-in datasets. To access them, we use the data() function after loading in the datasets library.\n\n#| eval: false\n#| include: false\nlibrary(datasets)\n\nprint(data())\n\nTo find out more about a specific dataset, we use the ? operator.\n?dataset\nExample:\nHelpful functions when working with datasets\n\n5.3.2.1 Loading datasets\ndatasets::dataset\nOR\ndatasets(\"dataset\")\nExample:\n\ndatasets::airquality\n\n\ndata(\"airquality\")\n\n\n5.3.2.2 Print datasets\nprint(dataset)\nExample:\n\nprint(airquality)\n\n\n5.3.2.3 Inspect head and tail of datasets\nhead(dataset)\nOR\ntail(dataset)\nExample:\n\nhead(airquality)\n\n\ntail(airquality)\n\n\n5.3.2.4 Inspect the column and row names in the dataset\nNames\nnames(dataset)\nRow names\nrownames(dataset)\nColumn names\ncolnames(dataset)\nExample:\n\nnames(airquality)\n\n\nrownames(airquality)\n\n\ncolnames(airquality)\n\n\n5.3.2.5 Dataset dimensions\nDimensions\ndim()\nNumber of rows\nnrow()\nNumber of columns\nncol()\nExample:\n\ndim(airquality)\n\n\nnrow(airquality)\n\n\nncol(airquality)\n\n\n5.3.2.6 Summary statistics for the dataset\nSummary of the dataset\nsummary()\nExample:\n\nsummary(airquality)\n\nAccess specific columns in a dataset\ndataset$column\nExample:\n\nairquality$Ozone\n\n\n5.3.3 Importing external datasets\nAs an R user, one of the tasks that you will often engage in is the importation of data from various sources. The commonly used data types include, but are not limited to CSV, TXT, JSON, SQL, SAS, STATA, SPSS, and XLSX. Additionally, R has two native data formats: Rdata (Rda) and Rds. Rdata is for multiple objects, while Rds is for a single R object.\nWhen importing external data, first set the correct working directory. The function getwd() will show the current working directory, and setwd(file_path_name) will set the working directory to the file path name specified.\nNOTE: Download the datasets from Appendix section of my book and save them to your working directory.\nData importation can use base R functions or the readr package, which is part of the tidyverse. We will review both sets of methods in this section.\n\n5.3.3.1 Base R\n\nCommonly used data importation formats\n\nThere is a wide variety of base R functions used for importing external data into R. The main format for importing data is shown below:\nread.___(path to file, header = __, sep = “_”, dec = “_”)\n\nThe argument “path to file” provides the location of the file the user intends to import.\nThe argument header is set as either TRUE or FALSE, if TRUE, R assumes that the file has a header.\nThe sep argument is a group of field separation characters which include , ,, ;, or \\t.\nThe dec argument allows one to set the different characters for decimal points, which include . or ,.\nThe stringsAsFactors argument, by default, allows strings to be read as factors. This can be set as TRUE or FALSE\n\nThe main functions for importing data using base R are listed below:\n\n\nread.table() is a general function to read in a file in table format as a data frame.\n\nExample:\n\nread.table(\"datasets/r4novice_datafile.csv\", header = TRUE, sep = \",\")\n\n\n\nread.csv() imports data with comma separated values. Alternatively, we use read.csv2() is used where a comma (“,”) indicates a decimal point and a semicolon (“;”) is a field separator.\n\nExample:\n\nread.csv(\"datasets/r4novice_datafile.csv\", header = TRUE, sep = \",\")\n\n\n\nread.delim() is used for files with tab-separated values, such as TXT, and where point “.” is used as a decimal point. Alternatively, read.delim2() is used for files with tab-separated values such as TXT and where comma “,” is used as a decimal point.\n\nExample:\n\nread.delim(\"datasets/r4novice_datafile.txt\", header = TRUE)\n\n\nGeneral data import\n\nFor beginners, one can use read.___(file.choose()) for the interactive selection of files.\nExample:\nread.table(file.choose())\nNOTE:Run this command in your R console and select the appropriate file from the working directory.\n\nExcel (XLS and XLSX) files are read in with read.xlsx()\n\n\nLoad the required library\n\nlibrary(xlsx)\n\nExample:\n\nread.xlsx(\"datasets/r4novice_datafile.xls\", sheetIndex = 1)\n\n\nread.xlsx(\"datasets/r4novice_datafile.xls\", sheetIndex = 1)\n\n\nLess frequently used data importation formats\n\n\nFixed-width formats: read.fwf(\"file path\", header = TRUE)\nSPSS/Stata/SAS Data Files: The foreign package reads SPSS SAV files, Stata DTA files, and SAS XPORT libraries.\n\nSteps for use:\nInstall the library\ninstall.packages(\"foreign\")\nLoad the library\nlibrary(foreign)\nSPSS: read.spss(“file path”, to.data.frame = __, use.value.labels = __)\n\nto.data.frame: indicates whether R should treat the loaded data as a dataframe (options are TRUE/FALSE).\nuse.value.labels: indicates whether R should convert variables with value labels into R factors (options are TRUE/FALSE).\n\nStata: read.dta(\"file\", convert.dates = __, convert.factors = __)\nconvert.dates: converts Stata dates to R’s Date class\nconvert.factors: creates factors with Stata value labels\nSAS: read.xport(\"file path\")\nAlternatively, one can utilize specific packages like rio or haven for more complex data formats like SPSS or SAS.\nInstall the library\ninstall.packages(\"haven\")\nLoad the library\nlibrary(haven)\nSPSS: read_sav(\"file path\")\nSAS: read_sas(\"file path\")\n\nNative data formats in R\n\nR Data Files: load(\"file_name.rda\")\nRDS Files: readRDS(\"file_name.rds\")\nOnline Files\nTo download and import an online file, we use read.html() and read.xml()\nExample:\nread.html(\"file path\")\nread.xml(\"file path\")\n\nMiscellaneous file formats\n\nJSON\nInstall the library\ninstall.packages(\"rjson\")\nLoad the library\nlibrary(rjson)\nfromJSON(file = \"file name\")\nSQL\nInstall the library\ninstall.packages(\"RSQLite\")\nLoad the library\nlibrary(RSQLite)\nsql_connect &lt;- dbConnect(RSQLite::SQLite(), \"file name\")\ndbListTables(sql_connect)\nMatlab\nInstall the library\ninstall.packages(\"Rmatlab\")\nLoad the library\nlibrary(Rmatlab)\nreadMat(\"file name\")\n\n5.3.3.2 Tidyverse and the readr/readxl packages\nTo enhance the speed and efficiency of data imports, the user can work with the readr and readxl packages that are part of the Tidyverse. This is because the functions in this package allows for faster data imports and work similarly despite the data type that is imported.\n\nCommonly used data importation formats in the tidyverse\n\n\n# install.packages(\"readr\")\n\n\nlibrary(readr)\n\n\nImport flat files\n\n\n\nread_table() is used to import whitespace-separated files.\n\nExample:\n\nread_table(\"datasets/r4novice_datafile.txt\", col_names = TRUE)\n\n\n\nread_csv() is for comma-separated values (CSV), while read_csv2() is used for semicolon-separated values with , as the decimal mark.\n\nExample:\n\nread_csv(\"datasets/r4novice_datafile.csv\")\n\n\n\nread_tsv() is for tab-separated values (TSV)\n\nExample:\n\nread_tsv(\"datasets/r4novice_datafile.txt\")\n\n\n\nread_delim() is for all delimited files, such as CSV and TSV.\n\nExample:\n\nread_delim(\"datasets/r4novice_datafile.csv\", delim = \",\")\n\n\nImport spreadsheets\n\n\n# install.packages(\"readxl\")\n\n\nlibrary(readxl)\n\nUse excel_sheets() to read the names of the different worksheets in the Excel workbook.\n\nexcel_sheets(\"datasets/r4novice_datafile.xlsx\")\n\n\nread_excel(\"datasets/r4novice_datafile.xlsx\", sheet = \"Sheet1\")\n\n\nLess frequently used data importation formats\n\n\nImport Google Sheets\n\n\n# install.packages(\"googlesheets4\")\n\n\nlibrary(googlesheets4)\n\nUse read_sheet(\"link to file\") to read in the file via the link.\n\nread_fwf() is used to read in fixed-width files.\nread_log() is the standard format for reading in web log files.\nreadRDS() is used to read data stored as a single R object.\nread_lines() is used to read data up to a specified number of lines in a file.\n\nNOTE: Missing data is a major challenge in data analysis. Strategies for dealing with this are discussed in Chapter 12 “Handling missing data” (Chapter 12).\n\n5.3.3.3 Inspecting the imported data\nOnce the data is imported, the user can inspect the data with str(), head(), and summary() functions. Additionally, one can check various aspects of the data such as names(), dim, and class to validate that the import was successful.\nExample:\nImport a specific dataset\n\nimport_inspect &lt;- read_csv(\"datasets/r4novice_datafile.csv\")\n\n\nhead(import_inspect)\n\n\ntail(import_inspect)\n\n\nsummary(import_inspect)\n\n\nstr(import_inspect)\n\n\nnames(import_inspect)\n\n\ndim(import_inspect)\n\n\nclass(import_inspect)\ntypeof(import_inspect)\n\n\n5.3.4 Saving data and analysis outputs\nBoth the base R functions and the readr package can be used to save data. This data can be in the form of cleaned/rearranged tables, or it can be other analysis outputs such as plots.\n\n5.3.4.1 Base R\nBefore we explore the functions used to save data, I will create a dataframe. A dataframe is one of the most common data objects used to store tabular data in R. A more in-depth look at dataframes will be provided in the chapter “Data Structures (Part I)” (Chapter 10).\n\ndf_to_save &lt;- data.frame(one=c(1, 3, 2, 9, 5),\n                         two=c(7, 7, 3, 8, 2),\n                         three=c(3, 3, 9, 7, 1),\n                         four=c(5, 2, 2, 8, 9))\n\n\nCommonly used R functions\n\n\n\nwrite.csv() saves data to a CSV file.\n\nExample:\n\nwrite.csv(df_to_save, file = \"saved_datasets/r4novice_saved_data.csv\")\n\n\n\nwrite.table() saves data to a specified file type.\n\nExample:\n\nwrite.table(df_to_save, file = \"saved_datasets/r4novice_saved_data.txt\", sep = \",\")\n\n\n\nfwrite() saves data to a specified file type. It is obtained from the data.table package.\n\n\nlibrary(data.table)\n\nExample:\n\nfwrite(df_to_save, file = \"saved_datasets/r4novice_saved_data_2.csv\", sep = \",\")\n\n\n5.3.4.2 Tidyverse and the readr/readxl packages\nThe readr and readxl also offer complementary functions that allow the user to save data.\n\nFlat files\n\n\n\nwrite_csv() and write_csv2() can be used to write comma-delimited and semicolon-delimited files, respectively.\n\nExample:\n\nwrite_csv(df_to_save, file = \"saved_datasets/r4novice_saved_data_3.csv\")\n\n\n\nwrite_tsv() is used to write a tab delimited file.\n\nExample:\n\nwrite_tsv(df_to_save, file = \"saved_datasets/r4novice_saved_data_2.txt\")\n\n\n\nwrite_delim() is used to write files with any delimiter.\n\nExample:\n\nwrite_delim(df_to_save, file = \"saved_datasets/r4novice_saved_data_4.csv\", delim = \";\")\n\n\nExcel files\n\n\n# install.packages(\"writexl\")\n\n\nlibrary(writexl)\n\nCreate an XLS and XLSX file\n\n#write_xlsx(df_to_save, \"saved_datasets/r4novice_saved_data_4.xls\")\nwrite_xlsx(df_to_save, \"saved_datasets/r4novice_saved_data_4.xlsx\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importing data and saving analysis outputs</span>"
    ]
  },
  {
    "objectID": "importing.html#exercises",
    "href": "importing.html#exercises",
    "title": "5  Importing data and saving analysis outputs",
    "section": "\n5.4 Exercises",
    "text": "5.4 Exercises\n\nAccess the mtcars, iris, and airquality datasets and read the documentation using ?. Additionally, explore the different characteristics of the data, such as names, dimensions, and summary statistics.\nImport datasets from different formats like CSV, Excel, and text files into your R environment using the base R functions such as read.*().\nSave your file using a new name with write.*(), save(), or .RData?\nHow can you check the structure and summary statistics of an imported dataset in R?\nWhat options do you have when importing data from non-local sources like URLs or databases? Explore functions like url() and dbConnect() for remote data access.\nHow can you specify import options for different file formats? Learn about arguments like sep, header, and na.strings for customized data reading.\nWhat is the difference between overwriting a dataset and appending new data to it in R?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importing data and saving analysis outputs</span>"
    ]
  },
  {
    "objectID": "importing.html#summary",
    "href": "importing.html#summary",
    "title": "5  Importing data and saving analysis outputs",
    "section": "\n5.5 Summary",
    "text": "5.5 Summary\nIn this lesson, the learner has been guided through the process of accessing internal datasets. Additionally, methods for importing external datasets have been demonstrated for various data formats. Lastly, the learner has been shown how to save the outputs of the data analysis. With this knowledge, the learner sis now ready to perform basic arithmetic operations, which will be covered in the next chapter.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Importing data and saving analysis outputs</span>"
    ]
  }
]